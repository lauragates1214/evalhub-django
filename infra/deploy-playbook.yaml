- hosts: all

  tasks:
    - name: Install docker  
      ansible.builtin.apt:  
        name: docker.io  
        state: present
        update_cache: true
      become: true # Run this with sudo (elevated privileges)

    - name: Add user to docker group
      ansible.builtin.user:
        name: "{{ ansible_user }}"
        groups: docker
        append: true # Don't remove any existing groups
      become: true # Run this with sudo (elevated privileges)

    - name: Reset ssh connection to all the user/group change to take effect
      ansible.builtin.meta: reset_connection

    - name: Build container image locally for AMD64
      ansible.builtin.command: 
        # Use buildx on command line to build for AMD64 architecture on M1/M2 Mac
        cmd: docker buildx build --platform linux/amd64 -t evalhub:latest --load {{ playbook_dir }}/..
      delegate_to: 127.0.0.1 # Run this task on local machine rather than server
      changed_when: true # Always report changed so that image is always re-exported and re-imported

    - name: Export container image locally
      community.docker.docker_image:
        name: evalhub
        archive_path: /tmp/evalhub-img.tar
        source: local
      delegate_to: 127.0.0.1 # Run this task on local machine rather than server

    - name: Upload image to server
      ansible.builtin.copy:
        src: /tmp/evalhub-img.tar
        dest: /tmp/evalhub-img.tar

    - name: Import container image on server
      community.docker.docker_image:
        name: evalhub
        load_path: /tmp/evalhub-img.tar
        source: load # Load from tar archive into Docker's image registry so Docker can use it to run containers
        force_source: true # Re-import even if image with same name exists
        state: present # Ensure image is present

    - name: Ensure .secret-key file exists # Intention: only happens once per server
      ansible.builtin.copy: # Populate file with arbitrary string content
        dest: ~/.secret-key
        content: "{{ lookup('password', '/dev/null length=32 chars=ascii_letters') }}"
        mode: '0600' # Read/write for user only
        force: false # Don't recreate if already exists

    - name: Read secret key back from file # Reread value on every deploy 
      ansible.builtin.slurp: # Read file content and base64 encode it
        src: ~/.secret-key
      register: secret_key

    - name: Ensure db.sqlite3 file exists outside container
      ansible.builtin.file:
        path: "{{ ansible_env.HOME }}/db.sqlite3" # Place database file in home directory of user
        state: touch # Create file if it doesn't exist
        owner: 1234  # So nonroot user can access it in container
      become: true  # Needed for ownership change
    
    - name: Run container
      community.docker.docker_container:
        name: evalhub
        image: evalhub 
        state: started
        recreate: true # Recreate container if it already exists
        env: # Set environment variables in container
          DJANGO_DEBUG_FALSE: "1" # Any value will do, just needs to be defined
          DJANGO_SECRET_KEY: "{{ secret_key.content | b64decode }}" # Decode base64 back to original string
          DJANGO_ALLOWED_HOST: "{{ inventory_hostname }}" # Set allowed host to server's hostname
          DJANGO_DB_PATH: /home/nonroot/db.sqlite3 # Path inside container where database file will be stored
        mounts: 
          - type: bind
            source: "{{ ansible_env.HOME }}/db.sqlite3" 
            target: /home/nonroot/db.sqlite3
        ports: 
          - "80:8888" # Map port 80 on server to port 8888 in container

    - name: Run migration inside container
      community.docker.docker_container_exec:
        container: evalhub
        command: ./manage.py migrate